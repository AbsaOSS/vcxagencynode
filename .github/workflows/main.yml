name: CI

on: [push, pull_request]

jobs:
  gainfo:
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_LOWERCASE: ${{ steps.mainstep.outputs.GITHUB_REPOSITORY_LOWERCASE }}
      BRANCH_NAME: ${{ steps.mainstep.outputs.BRANCH_NAME }}
      DOCKER_TAG_VERSION: ${{ steps.mainstep.outputs.DOCKER_TAG_VERSION }}
    steps:
      - run: echo $GITHUB_REPOSITORY
      - run: echo $GITHUB_REF
      - run: echo $GITHUB_HEAD_REF
      - run: echo $GITHUB_BASE_REF
      - run: echo $GITHUB_WORKSPACE
      - run: echo $GITHUB_EVENT_NAME
      - run: echo $GITHUB_RUN_NUMBER
      - run: echo $GITHUB_RUN_ID
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Set custom env variables
        run: |
          set -x
          GITHUB_REPOSITORY_LOWERCASE=`echo $GITHUB_REPOSITORY | awk '{print tolower($0)}'`
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY_LOWERCASE)

          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi
          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g"`  ## Keep only alphanumeric chars and dash
          echo ::set-env name=BRANCH_NAME::$(echo $BRANCH_NAME)

          REPO_VERSION=`bash ./get-version.sh`
          echo ::set-env name=REPO_VERSION::$(echo $REPO_VERSION)
          echo "Repo declares version $REPO_VERSION"

          if [[ "master" == "$BRANCH_NAME" ]]
          then
#            DOCKER_TAG_VERSION="$REPO_VERSION" # thing through versioned artifact strategy
             DOCKER_TAG_VERSION="$BRANCH_NAME"
          else
             DOCKER_TAG_VERSION="$BRANCH_NAME"
          fi
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)
          echo "Will be using docker tag $DOCKER_TAG_VERSION"
      - name: Check custom env variables
        id: mainstep
        run: |
          set -x
          echo "::set-output name=GITHUB_REPOSITORY_LOWERCASE::$GITHUB_REPOSITORY_LOWERCASE"
          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-output name=DOCKER_TAG_VERSION::$DOCKER_TAG_VERSION"


  print-custom-variables:
    needs: gainfo
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.gainfo.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.gainfo.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.gainfo.outputs.DOCKER_TAG_VERSION}})
      - name: Print custom variables
        run: |
          echo $GITHUB_REPOSITORY_LOWERCASE
          echo $BRANCH_NAME
          echo $DOCKER_TAG_VERSION

  build-vcxagency-base:
    needs:
      - gainfo
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.gainfo.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.gainfo.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.gainfo.outputs.DOCKER_TAG_VERSION}})
      - name: Docker setup
        run: |
          PACKAGES_USERNAME=${{ secrets.PACKAGES_ACCESS_USERNAME }}
          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $PACKAGES_USERNAME --password-stdin
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Pull image
        run: |
           docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-base:$DOCKER_TAG_VERSION || true
      - name: Build image
        run: |
          set -x
          LOCAL_TAG="vcxagency-base:$DOCKER_TAG_VERSION"
          REMOTE_TAG="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$LOCAL_TAG"

          INDYSDK_REPO="https://github.com/hyperledger/indy-sdk"
          INDYSDK_REVISION="1.15.0"
          docker build --cache-from "$REMOTE_TAG" \
                       --build-arg "INDYSDK_REPO=$INDYSDK_REPO" \
                       --build-arg "INDYSDK_REVISION=v$INDYSDK_REVISION" \
                       --build-arg BUILDKIT_INLINE_CACHE=1 \
                       -f vcxagency-base/vcxagency-base.Dockerfile \
                       -t "$LOCAL_TAG" \
                        .
          echo "Tagging $LOCAL_TAG as $REMOTE_TAG"
          docker tag "$LOCAL_TAG" "$REMOTE_TAG" && docker push "$REMOTE_TAG"
          docker push "$REMOTE_TAG" || true
          docker image ls

  build-image-vcxagency:
    runs-on: ubuntu-16.04
    needs:
      - build-vcxagency-base
      - gainfo
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.gainfo.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.gainfo.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.gainfo.outputs.DOCKER_TAG_VERSION}})
      - name: Docker setup
        run: |
          PACKAGES_USERNAME=${{ secrets.PACKAGES_ACCESS_USERNAME }}
          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $PACKAGES_USERNAME --password-stdin
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Pull image
        run: |
           docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION || true
           docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-base:$DOCKER_TAG_VERSION || true
      - name: Build image
        run: |
          set -x
          LOCAL_TAG="vcxagency-node:$DOCKER_TAG_VERSION"
          REMOTE_TAG="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION"
          REMOTE_TAG_BASE_IMAGE="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-base:$DOCKER_TAG_VERSION"
          LOCAL_TAG_BASE_IMAGE="vcxagency-base:$DOCKER_TAG_VERSION"

          docker tag "$REMOTE_TAG_BASE_IMAGE" "$LOCAL_TAG_BASE_IMAGE" || true

          echo "Will build from base image $LOCAL_TAG_BASE_IMAGE"
          docker build --cache-from "$REMOTE_TAG" \
                       --build-arg BUILDKIT_INLINE_CACHE=1 \
                       --build-arg AGENCY_BASE_IMAGE="$LOCAL_TAG_BASE_IMAGE" \
                       -f vcxagency-node/Dockerfile \
                       -t "$LOCAL_TAG" \
                        .
          echo "Tagging $LOCAL_TAG as $REMOTE_TAG"
          docker tag "$LOCAL_TAG" "$REMOTE_TAG"

          docker push "$REMOTE_TAG" || true

          docker image ls

  lint-vcxagency-node:
    runs-on: ubuntu-16.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-node && standard

  lint-vcxagency-client:
    runs-on: ubuntu-16.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-client && standard

  lint-easy-indysdk:
    runs-on: ubuntu-16.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd easy-indysdk && standard
