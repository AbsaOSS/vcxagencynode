name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "**"

jobs:
  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_LOWERCASE: ${{ steps.mainstep.outputs.GITHUB_REPOSITORY_LOWERCASE }}
      RELEASE_VERSION: ${{ steps.mainstep.outputs.RELEASE_VERSION }}
      CACHE_KEY_BASE: ${{ steps.mainstep.outputs.CACHE_KEY_BASE }}
      CACHE_KEY_AGENCY: ${{ steps.mainstep.outputs.CACHE_KEY_AGENCY }}
      CACHED_DOCKER_IMG_NAME_BASE: ${{ steps.mainstep.outputs.CACHED_DOCKER_IMG_NAME_BASE }}
      CACHED_DOCKER_IMG_NAME_AGENCY: ${{ steps.mainstep.outputs.CACHED_DOCKER_IMG_NAME_AGENCY }}
      PUBLISH_DOCKER_IMG_NAME_BASE: ${{ steps.mainstep.outputs.PUBLISH_DOCKER_IMG_NAME_BASE }}
      PUBLISH_DOCKER_IMG_NAME_AGENCY: ${{ steps.mainstep.outputs.PUBLISH_DOCKER_IMG_NAME_AGENCY }}
    steps:
      - run: echo $GITHUB_REPOSITORY
      - run: echo $GITHUB_REF
      - run: echo $GITHUB_HEAD_REF
      - run: echo $GITHUB_BASE_REF
      - run: echo $GITHUB_WORKSPACE
      - run: echo $GITHUB_EVENT_NAME
      - run: echo $GITHUB_RUN_NUMBER
      - run: echo $GITHUB_RUN_ID
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Set outputs
        id: mainstep
        run: |
          set -x
          export GITHUB_REPOSITORY_LOWERCASE=`echo $GITHUB_REPOSITORY | awk '{print tolower($0)}'`

          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          export FULL_REPO_SLUG=`echo "${{github.event.pull_request.head.repo.full_name}}" | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          export BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash

          RELEASE_VERSION=''

          if [[ "${{ github.event_name}}" == "push" && "$BRANCH_NAME" == "master" ]]
          then
            echo "Running push on master branch. Release will happen if version was bumped."

            export REPO_VERSION_HIGHEST=$(git describe --tags --always --abbrev=0)
            echo "Highest released version was $REPO_VERSION_HIGHEST"

            export REPO_VERSION_DESIRED=`bash ./get-version.sh`
            echo "Repo declares version $REPO_VERSION_DESIRED"

            if [[ "$REPO_VERSION_HIGHEST" == "$REPO_VERSION_DESIRED" ]]
            then
              export DOCKER_TAG_VERSION="$BRANCH_NAME"
              echo "Running push on master but version was not bumped. Will NOT release."
            else
              export RELEASE_VERSION="$REPO_VERSION_DESIRED"
              export DOCKER_TAG_VERSION="$REPO_VERSION_DESIRED"
              echo "Running push on master, version was bumped $REPO_VERSION_HIGHEST->$RELEASE_VERSION. Will release $RELEASE_VERSION."
            fi
          else
             export DOCKER_TAG_VERSION="$FULL_REPO_SLUG-$BRANCH_NAME"
             echo "This is not push to master. Will NOT release."
          fi

          export DOCKER_BASE_HASH=${{ hashFiles('vcxagency-base') }}
          export CODE_AGENCY_HASH=${{ hashFiles('vcxagency-node') }}
          export CODE_EASYSDK_HASH=${{ hashFiles('easy-indysdk') }}
          export CODE_CLIENT_HASH=${{ hashFiles('vcxagency-client') }}

          echo "::set-output name=GITHUB_REPOSITORY_LOWERCASE::$GITHUB_REPOSITORY_LOWERCASE"
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"

          echo "::set-output name=CACHE_KEY_BASE::$DOCKER_BASE_HASH"
          echo "::set-output name=CACHE_KEY_AGENCY::$(echo basehash-$CACHE_KEY_BASE-agencyhash-$CODE_AGENCY_HASH-clienthash-$CODE_CLIENT_HASH-easyindysdkhash-$CODE_EASYSDK_HASH)"

          echo "::set-output name=CACHED_DOCKER_IMG_NAME_BASE::vcxagency-base:cached"
          echo "::set-output name=CACHED_DOCKER_IMG_NAME_AGENCY::vcxagency-node:cached"

          echo "::set-output name=PUBLISH_DOCKER_IMG_NAME_BASE::vcxagency-base:$DOCKER_TAG_VERSION"
          echo "::set-output name=PUBLISH_DOCKER_IMG_NAME_AGENCY::vcxagency-node:$DOCKER_TAG_VERSION"

  build-vcxagency-base:
    needs:
      - workflow-setup
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_BASE: ${{needs.workflow-setup.outputs.CACHE_KEY_BASE}}
      CACHED_DOCKER_IMG_NAME_BASE: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_BASE}}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_BASE }}
      - name: If NOT found in cache, Build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          vcxagency-base/build.sh "$CACHED_DOCKER_IMG_NAME_BASE"
          mkdir -p /tmp/imgcache
          docker save "$CACHED_DOCKER_IMG_NAME_BASE" > /tmp/imgcache/img_base.rar
          docker image ls

  build-image-vcxagency:
    runs-on: ubuntu-latest
    needs:
      - build-vcxagency-base
      - workflow-setup
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_BASE: ${{needs.workflow-setup.outputs.CACHE_KEY_BASE}}
      CACHE_KEY_AGENCY: ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}}
      CACHED_DOCKER_IMG_NAME_BASE: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_BASE}}
      CACHED_DOCKER_IMG_NAME_AGENCY: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}}
    steps:
      - name: Load base image cache
        id: load-cached-image-base
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_BASE }}

      - name: If no cached image found
        if: steps.load-cached-image-base.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_BASE"; exit -1

      - name: Load base image
        run: docker load < /tmp/imgcache/img_base.rar

      - name: Verify base image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_BASE" || { echo "Image $CACHED_DOCKER_IMG_NAME_BASE was not found!"; docker image ls; exit 1; }

      - name: Load base image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}
      - name: Git checkout
        uses: actions/checkout@v2
      - name: If no cached image found, build and save to cache
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: |
          set -x
          echo "Cache miss for key ${{ env.CACHE_KEY_AGENCY }} No image was found. Let's build it!"
          docker build \
                       --build-arg AGENCY_BASE_IMAGE="$CACHED_DOCKER_IMG_NAME_BASE" \
                       -f vcxagency-node/Dockerfile \
                       -t "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$CACHED_DOCKER_IMG_NAME_AGENCY" > /tmp/imgcache/img_agency.rar
          docker image rm "$CACHED_DOCKER_IMG_NAME_AGENCY"

      - name: Load agency image from cache
        run: |
          docker load < /tmp/imgcache/img_agency.rar
      - name: Verify agency image was loaded
        run: |
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }


  test-vcxagency-node:
    runs-on: ubuntu-latest
    needs:
      - build-image-vcxagency
      - workflow-setup
    env:
      CACHE_KEY_AGENCY: ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}}
      CACHED_DOCKER_IMG_NAME_AGENCY: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}}
    steps:
      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}

      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY"; exit -1

      - name: Load agency image from cache
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Run tests
        run: |
          set -x
          docker image ls
          docker run -d --name postgres \
                         -e POSTGRES_PASSWORD=mysecretpassword \
                         -p 5432:5432 \
                         postgres:12.1
          docker run --rm --name vcxagencynode \
                        --network host \
                         "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                         bash -c "yarn install && yarn run test:unit"

  test-easy-indysdk:
    runs-on: ubuntu-latest
    needs:
      - build-image-vcxagency
      - workflow-setup
    env:
      CACHE_KEY_AGENCY: ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}}
      CACHED_DOCKER_IMG_NAME_AGENCY: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}}
    steps:
      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}

      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY"; exit -1

      - name: Load agency image from cache
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Run tests
        run: |
          set -x
          docker run --rm --name vcxagencynode \
                        --network host \
                         "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                         bash -c "cd /home/node/easy-indysdk && yarn install && yarn run test:unit"

  test-vcxagency-client:
    runs-on: ubuntu-latest
    needs:
      - build-image-vcxagency
      - workflow-setup
    env:
      CACHE_KEY_AGENCY: ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}}
      CACHED_DOCKER_IMG_NAME_AGENCY: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}}
    steps:
      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}

      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY";exit -1

      - name: Load agency image from cache
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Run tests
        run: |
          set -x
          docker run --rm --name vcxagencynode \
                        --network host \
                         "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                         bash -c "cd /home/node/vcxagency-client && yarn install && yarn run test:unit"

  lint-vcxagency-node:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-node && standard

  lint-vcxagency-client:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-client && standard

  lint-easy-indysdk:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd easy-indysdk && standard

  publish-images:
    needs:
      - workflow-setup
      - build-vcxagency-base
      - build-image-vcxagency
      - test-vcxagency-node
      - test-easy-indysdk
      - test-vcxagency-client
      - lint-vcxagency-node
      - lint-vcxagency-client
      - lint-easy-indysdk
    runs-on: ubuntu-latest
    env:
      CACHE_KEY_BASE: ${{needs.workflow-setup.outputs.CACHE_KEY_BASE}}
      CACHE_KEY_AGENCY: ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}}
      CACHED_DOCKER_IMG_NAME_BASE: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_BASE}}
      CACHED_DOCKER_IMG_NAME_AGENCY: ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}}
      GITHUB_REPOSITORY_LOWERCASE: ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}}
      PUBLISH_DOCKER_IMG_NAME_BASE: ${{needs.workflow-setup.outputs.PUBLISH_DOCKER_IMG_NAME_BASE}}
      PUBLISH_DOCKER_IMG_NAME_AGENCY: ${{needs.workflow-setup.outputs.PUBLISH_DOCKER_IMG_NAME_AGENCY}}
    steps:
      - name: Load base image cache
        id: load-cached-image-base
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_BASE }}
      - name: If no cached image found
        if: steps.load-cached-image-base.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_BASE"; exit -1
      - name: Load base image
        run: docker load < /tmp/imgcache/img_base.rar

      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}
      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY"; exit -1
      - name: Load agency image
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify images were loaded
        run: |
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_BASE" || { echo "Image $CACHED_DOCKER_IMG_NAME_BASE was not found!"; docker image ls; exit 1; }
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish images
        run: |
          REMOTE_DOCKER_IMG_NAME_BASE="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$PUBLISH_DOCKER_IMG_NAME_BASE"
          REMOTE_DOCKER_IMG_NAME_AGENCY="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$PUBLISH_DOCKER_IMG_NAME_AGENCY"

          docker tag "$CACHED_DOCKER_IMG_NAME_BASE"   "$REMOTE_DOCKER_IMG_NAME_BASE"
          docker tag "$CACHED_DOCKER_IMG_NAME_AGENCY" "$REMOTE_DOCKER_IMG_NAME_AGENCY"
          docker image ls

          docker push "$REMOTE_DOCKER_IMG_NAME_BASE" || true
          docker push "$REMOTE_DOCKER_IMG_NAME_AGENCY" || true

  make-release:
    needs:
      - workflow-setup
      - build-vcxagency-base
      - build-image-vcxagency
      - test-vcxagency-node
      - test-easy-indysdk
      - test-vcxagency-client
      - lint-vcxagency-node
      - lint-vcxagency-client
      - lint-easy-indysdk
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{needs.workflow-setup.outputs.RELEASE_VERSION}}
    if: ${{ needs.workflow-setup.outputs.RELEASE_VERSION }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Generate changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          futureRelease: ${{ env.RELEASE_VERSION }}
          releaseBranch: master
          pullRequests: true
          unreleased: true
          unreleasedOnly: true
          issuesWoLabels: true
          prWoLabels: true
          stripGeneratorNotice: true
          stripHeaders: true
          verbose: true
      - name: Release for master pushes
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body_path: /github/workspace/CHANGELOG.md
          draft: false
          prerelease: false
