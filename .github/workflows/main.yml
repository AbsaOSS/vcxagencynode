name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "**"

jobs:
  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_LOWERCASE: ${{ steps.mainstep.outputs.GITHUB_REPOSITORY_LOWERCASE }}
      BRANCH_NAME: ${{ steps.mainstep.outputs.BRANCH_NAME }}
      DOCKER_TAG_VERSION: ${{ steps.mainstep.outputs.DOCKER_TAG_VERSION }}
      FULL_REPO_SLUG: ${{ steps.mainstep.outputs.FULL_REPO_SLUG }}
      RELEASE_VERSION: ${{ steps.mainstep.outputs.RELEASE_VERSION }}
    steps:
      - run: echo $GITHUB_REPOSITORY
      - run: echo $GITHUB_REF
      - run: echo $GITHUB_HEAD_REF
      - run: echo $GITHUB_BASE_REF
      - run: echo $GITHUB_WORKSPACE
      - run: echo $GITHUB_EVENT_NAME
      - run: echo $GITHUB_RUN_NUMBER
      - run: echo $GITHUB_RUN_ID
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Set custom env variables
        run: |
          set -x
          GITHUB_REPOSITORY_LOWERCASE=`echo $GITHUB_REPOSITORY | awk '{print tolower($0)}'`
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY_LOWERCASE)

          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          FULL_REPO_SLUG=`echo "${{github.event.pull_request.head.repo.full_name}}" | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=FULL_REPO_SLUG::$(echo $FULL_REPO_SLUG)

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=BRANCH_NAME::$(echo $BRANCH_NAME)

          RELEASE_VERSION=''
          if [[ "${{ github.event_name}}" == "push" && "$BRANCH_NAME" == "master" ]]
          then
            echo "Running push on master branch. Release will happen if version was bumped."

            REPO_VERSION_HIGHEST=$(git describe --tags --always --abbrev=0)
            echo ::set-env name=REPO_VERSION_HIGHEST::$(echo $REPO_VERSION_HIGHEST)
            echo "Highest released version was $REPO_VERSION_HIGHEST"

            REPO_VERSION_DESIRED=`bash ./get-version.sh`
            echo ::set-env name=REPO_VERSION_DESIRED::$(echo $REPO_VERSION_DESIRED)
            echo "Repo declares version $REPO_VERSION_DESIRED"

            if [[ "$REPO_VERSION_HIGHEST" == "$REPO_VERSION_DESIRED" ]]
            then
              DOCKER_TAG_VERSION="$BRANCH_NAME"
              echo "Running push on master but version was not bumped. Will NOT release."
            else
              DOCKER_TAG_VERSION="$BRANCH_NAME"
              RELEASE_VERSION="$REPO_VERSION_DESIRED"
              DOCKER_TAG_VERSION="$REPO_VERSION_DESIRED"
              echo "Running push on master, version was bumped $REPO_VERSION_HIGHEST->$RELEASE_VERSION. Will release $RELEASE_VERSION."
            fi
          else
             DOCKER_TAG_VERSION="$FULL_REPO_SLUG-$BRANCH_NAME"
             echo "This is not push to master. Will NOT release."
          fi

          echo ::set-env name=RELEASE_VERSION::$(echo $RELEASE_VERSION)
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)
          echo "Docker images built in this CI will be using tag '$DOCKER_TAG_VERSION'"

      - name: Check custom env variables
        id: mainstep
        run: |
          set -x
          echo "::set-output name=GITHUB_REPOSITORY_LOWERCASE::$GITHUB_REPOSITORY_LOWERCASE"
          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-output name=DOCKER_TAG_VERSION::$DOCKER_TAG_VERSION"
          echo "::set-output name=FULL_REPO_SLUG::$FULL_REPO_SLUG"
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"


  print-custom-variables:
    needs: workflow-setup
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.workflow-setup.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.workflow-setup.outputs.DOCKER_TAG_VERSION}})
          echo ::set-env name=FULL_REPO_SLUG::$(echo ${{needs.workflow-setup.outputs.FULL_REPO_SLUG}})
      - name: Print custom variables
        run: |
          echo $GITHUB_REPOSITORY_LOWERCASE
          echo $BRANCH_NAME
          echo $DOCKER_TAG_VERSION
          echo $FULL_REPO_SLUG

  build-vcxagency-base:
    needs:
      - workflow-setup
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.workflow-setup.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.workflow-setup.outputs.DOCKER_TAG_VERSION}})
      - name: Docker setup
        run: |
          PACKAGES_USERNAME=${{ secrets.PACKAGES_ACCESS_USERNAME }}
          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $PACKAGES_USERNAME --password-stdin
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Pull image
        run: |
           docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-base:$DOCKER_TAG_VERSION || true
      - name: Build image
        run: |
          set -x
          LOCAL_TAG="vcxagency-base:$DOCKER_TAG_VERSION"
          REMOTE_TAG="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$LOCAL_TAG"

          INDYSDK_REPO="https://github.com/hyperledger/indy-sdk"
          INDYSDK_REVISION="1.15.0"
          docker build --cache-from "$REMOTE_TAG" \
                       --build-arg "INDYSDK_REPO=$INDYSDK_REPO" \
                       --build-arg "INDYSDK_REVISION=v$INDYSDK_REVISION" \
                       --build-arg BUILDKIT_INLINE_CACHE=1 \
                       -f vcxagency-base/vcxagency-base.Dockerfile \
                       -t "$LOCAL_TAG" \
                        .
          echo "Tagging $LOCAL_TAG as $REMOTE_TAG"
          docker tag "$LOCAL_TAG" "$REMOTE_TAG" && docker push "$REMOTE_TAG"
          docker push "$REMOTE_TAG" || true
          docker image ls

  build-image-vcxagency:
    runs-on: ubuntu-16.04
    needs:
      - build-vcxagency-base
      - workflow-setup
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.workflow-setup.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.workflow-setup.outputs.DOCKER_TAG_VERSION}})
      - name: Docker setup
        run: |
          PACKAGES_USERNAME=${{ secrets.PACKAGES_ACCESS_USERNAME }}
          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $PACKAGES_USERNAME --password-stdin
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Pull image
        run: |
           docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION || true
           docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-base:$DOCKER_TAG_VERSION || true
      - name: Build image
        run: |
          set -x
          docker image ls
          LOCAL_TAG="vcxagency-node:$DOCKER_TAG_VERSION"
          REMOTE_TAG="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$LOCAL_TAG"
          REMOTE_TAG_BASE_IMAGE="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-base:$DOCKER_TAG_VERSION"
          LOCAL_TAG_BASE_IMAGE="vcxagency-base:$DOCKER_TAG_VERSION"

          echo "LOCAL_TAG=$LOCAL_TAG"
          echo "REMOTE_TAG=$REMOTE_TAG"
          echo "REMOTE_TAG_BASE_IMAGE=$REMOTE_TAG_BASE_IMAGE"
          echo "LOCAL_TAG_BASE_IMAGE=$LOCAL_TAG_BASE_IMAGE"

          docker tag "$REMOTE_TAG_BASE_IMAGE" "$LOCAL_TAG_BASE_IMAGE" || true
          docker image ls

          echo "Will build from agency image $LOCAL_TAG_BASE_IMAGE"
          docker build \
                       --build-arg BUILDKIT_INLINE_CACHE=1 \
                       --build-arg AGENCY_BASE_IMAGE="$LOCAL_TAG_BASE_IMAGE" \
                       -f vcxagency-node/Dockerfile \
                       -t "$LOCAL_TAG" \
                        .
          docker image ls
          echo "Tagging $LOCAL_TAG as $REMOTE_TAG"
          docker tag "$LOCAL_TAG" "$REMOTE_TAG"
          docker image ls

          docker push "$REMOTE_TAG" || true
          docker image ls

  test-vcxagency-node:
    runs-on: ubuntu-16.04
    needs:
      - build-image-vcxagency
      - workflow-setup
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.workflow-setup.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.workflow-setup.outputs.DOCKER_TAG_VERSION}})
      - name: Docker setup
        run: |
          PACKAGES_USERNAME=${{ secrets.PACKAGES_ACCESS_USERNAME }}
          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $PACKAGES_USERNAME --password-stdin
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Pull image
        run: |
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION || true
      - name: Run tests
        run: |
          set -x
          docker image ls
          docker run -d --name postgres \
                         -e POSTGRES_PASSWORD=mysecretpassword \
                         -p 5432:5432 \
                         postgres:12.1
          docker run --rm --name vcxagencynode \
                        --network host \
                         docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION \
                         bash -c "yarn install && yarn run test:unit"

  test-easy-indysdk:
    runs-on: ubuntu-16.04
    needs:
      - build-image-vcxagency
      - workflow-setup
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.workflow-setup.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.workflow-setup.outputs.DOCKER_TAG_VERSION}})
      - name: Docker setup
        run: |
          PACKAGES_USERNAME=${{ secrets.PACKAGES_ACCESS_USERNAME }}
          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $PACKAGES_USERNAME --password-stdin
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Pull image
        run: |
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION || true
      - name: Run tests
        run: |
          set -x
          docker run --rm --name vcxagencynode \
                        --network host \
                         docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION \
                         bash -c "cd /home/app/easy-indysdk && yarn install && yarn run test:unit"

  test-vcxagency-client:
    runs-on: ubuntu-16.04
    needs:
      - build-image-vcxagency
      - workflow-setup
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.workflow-setup.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.workflow-setup.outputs.DOCKER_TAG_VERSION}})
      - name: Docker setup
        run: |
          PACKAGES_USERNAME=${{ secrets.PACKAGES_ACCESS_USERNAME }}
          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $PACKAGES_USERNAME --password-stdin
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Pull image
        run: |
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION || true
      - name: Run tests
        run: |
          set -x
          docker run --rm --name vcxagencynode \
                        --network host \
                         docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/vcxagency-node:$DOCKER_TAG_VERSION \
                         bash -c "cd /home/app/vcxagency-client && yarn install && yarn run test:unit"

  lint-vcxagency-node:
    runs-on: ubuntu-16.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-node && standard

  lint-vcxagency-client:
    runs-on: ubuntu-16.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-client && standard

  lint-easy-indysdk:
    runs-on: ubuntu-16.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd easy-indysdk && standard

  make-release:
    needs:
      - workflow-setup
      - build-vcxagency-base
      - build-image-vcxagency
      - test-vcxagency-node
      - test-easy-indysdk
      - test-vcxagency-client
      - lint-vcxagency-node
      - lint-vcxagency-client
      - lint-easy-indysdk
    runs-on: ubuntu-16.04
    steps:
      - name: Load up release version
        run: |
          echo ::set-env name=RELEASE_VERSION::$(echo ${{needs.workflow-setup.outputs.RELEASE_VERSION}})
      - name: Release for master pushes
        run: |
          if [[ "$RELEASE_VERSION" ]]
          then
            echo "Release version was defined! Will create release $RELEASE_VERSION"
            curl -v --request POST \
                --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
                --header "Content-Type: application/json" \
                -d "{\"tag_name\": \"$RELEASE_VERSION\", \"name\": \"$RELEASE_VERSION\", \"body\": \"Automatic release $RELEASE_VERSION\" }" \
                --url https://api.github.com/repos/$GITHUB_REPOSITORY/releases
          else
             echo "New version was not defined, skipping release. Check 'workflow-setup' job to see the reason."
          fi
