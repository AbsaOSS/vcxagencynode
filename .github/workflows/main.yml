name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "**"

jobs:
#  detailed-info:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Print Context details
#        run: |
#          echo "This was trigerred by event = ${{ github.event_name}}"
#          echo "Github context = ${{ toJson(github) }}"
#          echo "Event info ${{ toJson(github.event) }}"

  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_LOWERCASE: ${{ steps.mainstep.outputs.GITHUB_REPOSITORY_LOWERCASE }}
      BRANCH_NAME: ${{ steps.mainstep.outputs.BRANCH_NAME }}
      DOCKER_TAG_VERSION: ${{ steps.mainstep.outputs.DOCKER_TAG_VERSION }}
      RELEASE_VERSION: ${{ steps.mainstep.outputs.RELEASE_VERSION }}
      CACHE_KEY_BASE: ${{ steps.mainstep.outputs.CACHE_KEY_BASE }}
      CACHE_KEY_AGENCY: ${{ steps.mainstep.outputs.CACHE_KEY_AGENCY }}
      CACHED_DOCKER_IMG_NAME_BASE: ${{ steps.mainstep.outputs.CACHED_DOCKER_IMG_NAME_BASE }}
      CACHED_DOCKER_IMG_NAME_AGENCY: ${{ steps.mainstep.outputs.CACHED_DOCKER_IMG_NAME_AGENCY }}
      PUBLISH_DOCKER_IMG_NAME_BASE: ${{ steps.mainstep.outputs.PUBLISH_DOCKER_IMG_NAME_BASE }}
      PUBLISH_DOCKER_IMG_NAME_AGENCY: ${{ steps.mainstep.outputs.PUBLISH_DOCKER_IMG_NAME_AGENCY }}
    steps:
      - run: echo $GITHUB_REPOSITORY
      - run: echo $GITHUB_REF
      - run: echo $GITHUB_HEAD_REF
      - run: echo $GITHUB_BASE_REF
      - run: echo $GITHUB_WORKSPACE
      - run: echo $GITHUB_EVENT_NAME
      - run: echo $GITHUB_RUN_NUMBER
      - run: echo $GITHUB_RUN_ID
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Set custom env variables
        run: |
          set -x
          GITHUB_REPOSITORY_LOWERCASE=`echo $GITHUB_REPOSITORY | awk '{print tolower($0)}'`
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY_LOWERCASE)

          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          FULL_REPO_SLUG=`echo "${{github.event.pull_request.head.repo.full_name}}" | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=FULL_REPO_SLUG::$(echo $FULL_REPO_SLUG)

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=BRANCH_NAME::$(echo $BRANCH_NAME)

          RELEASE_VERSION=''

          if [[ "${{ github.event_name}}" == "push" && "$BRANCH_NAME" == "master" ]]
          then
            echo "Running push on master branch. Release will happen if version was bumped."

            REPO_VERSION_HIGHEST=$(git describe --tags --always --abbrev=0)
            echo ::set-env name=REPO_VERSION_HIGHEST::$(echo $REPO_VERSION_HIGHEST)
            echo "Highest released version was $REPO_VERSION_HIGHEST"

            REPO_VERSION_DESIRED=`bash ./get-version.sh`
            echo ::set-env name=REPO_VERSION_DESIRED::$(echo $REPO_VERSION_DESIRED)
            echo "Repo declares version $REPO_VERSION_DESIRED"

            if [[ "$REPO_VERSION_HIGHEST" == "$REPO_VERSION_DESIRED" ]]
            then
              DOCKER_TAG_VERSION="$BRANCH_NAME"
              echo "Running push on master but version was not bumped. Will NOT release."
            else
              DOCKER_TAG_VERSION="$BRANCH_NAME"
              RELEASE_VERSION="$REPO_VERSION_DESIRED"
              DOCKER_TAG_VERSION="$REPO_VERSION_DESIRED"
              echo "Running push on master, version was bumped $REPO_VERSION_HIGHEST->$RELEASE_VERSION. Will release $RELEASE_VERSION."
            fi
          else
             DOCKER_TAG_VERSION="$FULL_REPO_SLUG-$BRANCH_NAME"
             echo "This is not push to master. Will NOT release."
          fi

          echo ::set-env name=RELEASE_VERSION::$(echo $RELEASE_VERSION)
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)
          echo "Docker images built in this CI will be using tag '$DOCKER_TAG_VERSION'"

          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)
          echo ::set-env name=DOCKER_BASE_HASH::$(echo ${{ hashFiles('vcxagency-base') }})
          echo ::set-env name=CODE_AGENCY_HASH::$(echo ${{ hashFiles('vcxagency-node') }})
          echo ::set-env name=CODE_EASYSDK_HASH::$(echo ${{ hashFiles('easy-indysdk') }})
          echo ::set-env name=CODE_CLIENT_HASH::$(echo ${{ hashFiles('vcxagency-client') }})

      - name: Set and print outputs
        id: mainstep
        run: |
          set -x
          echo "::set-output name=GITHUB_REPOSITORY_LOWERCASE::$GITHUB_REPOSITORY_LOWERCASE"
          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-output name=DOCKER_TAG_VERSION::$DOCKER_TAG_VERSION"
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"

          echo "::set-output name=CACHE_KEY_BASE::$DOCKER_BASE_HASH"
          echo "::set-output name=CACHE_KEY_AGENCY::$(echo basehash-$CACHE_KEY_BASE-agencyhash-$CODE_AGENCY_HASH-clienthash-$CODE_CLIENT_HASH-easyindysdkhash-$CODE_EASYSDK_HASH)"

          echo "::set-output name=CACHED_DOCKER_IMG_NAME_BASE::vcxagency-base:cached"
          echo "::set-output name=CACHED_DOCKER_IMG_NAME_AGENCY::vcxagency-node:cached"

          echo "::set-output name=PUBLISH_DOCKER_IMG_NAME_BASE::vcxagency-base:$DOCKER_TAG_VERSION"
          echo "::set-output name=PUBLISH_DOCKER_IMG_NAME_AGENCY::vcxagency-node:$DOCKER_TAG_VERSION"

  build-vcxagency-base:
    needs:
      - workflow-setup
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=BRANCH_NAME::$(echo ${{needs.workflow-setup.outputs.BRANCH_NAME}})
          echo ::set-env name=DOCKER_TAG_VERSION::$(echo ${{needs.workflow-setup.outputs.DOCKER_TAG_VERSION}})
          echo ::set-env name=CACHE_KEY_BASE::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_BASE}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_BASE::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_BASE}})
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_BASE }}
      - name: If NOT found in cache, Build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          vcxagency-base/build.sh "$CACHED_DOCKER_IMG_NAME_BASE"
          mkdir -p /tmp/imgcache
          docker save "$CACHED_DOCKER_IMG_NAME_BASE" > /tmp/imgcache/img_base.rar
          docker image ls

  build-image-vcxagency:
    runs-on: ubuntu-latest
    needs:
      - build-vcxagency-base
      - workflow-setup
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_BASE::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_BASE}})
          echo ::set-env name=CACHE_KEY_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_BASE::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_BASE}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}})

      - name: Load base image cache
        id: load-cached-image-base
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_BASE }}

      - name: If no cached image found
        if: steps.load-cached-image-base.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_BASE"; exit -1

      - name: Load base image
        run: docker load < /tmp/imgcache/img_base.rar

      - name: Verify base image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_BASE" || { echo "Image $CACHED_DOCKER_IMG_NAME_BASE was not found!"; docker image ls; exit 1; }

      - name: Load base image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}
      - name: Git checkout
        uses: actions/checkout@v2
      - name: If no cached image found, build and save to cache
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: |
          set -x
          echo "Cache miss for key ${{ env.CACHE_KEY_AGENCY }} No image was found. Let's build it!"
          docker build \
                       --build-arg AGENCY_BASE_IMAGE="$CACHED_DOCKER_IMG_NAME_BASE" \
                       -f vcxagency-node/Dockerfile \
                       -t "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$CACHED_DOCKER_IMG_NAME_AGENCY" > /tmp/imgcache/img_agency.rar
          docker image rm "$CACHED_DOCKER_IMG_NAME_AGENCY"

      - name: Load agency image from cache
        run: |
          docker load < /tmp/imgcache/img_agency.rar
      - name: Verify agency image was loaded
        run: |
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }


  test-vcxagency-node:
    runs-on: ubuntu-latest
    needs:
      - build-image-vcxagency
      - workflow-setup
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}})
      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}

      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY"; exit -1

      - name: Load agency image from cache
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Run tests
        run: |
          set -x
          docker image ls
          docker run -d --name postgres \
                         -e POSTGRES_PASSWORD=mysecretpassword \
                         -p 5432:5432 \
                         postgres:12.1
          docker run --rm --name vcxagencynode \
                        --network host \
                         "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                         bash -c "yarn install && yarn run test:unit"

  test-easy-indysdk:
    runs-on: ubuntu-latest
    needs:
      - build-image-vcxagency
      - workflow-setup
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}})
      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}

      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY"; exit -1

      - name: Load agency image from cache
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Run tests
        run: |
          set -x
          docker run --rm --name vcxagencynode \
                        --network host \
                         "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                         bash -c "cd /home/node/easy-indysdk && yarn install && yarn run test:unit"

  test-vcxagency-client:
    runs-on: ubuntu-latest
    needs:
      - build-image-vcxagency
      - workflow-setup
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}})

      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}

      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY";exit -1

      - name: Load agency image from cache
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify image was loaded
        run: docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Run tests
        run: |
          set -x
          docker run --rm --name vcxagencynode \
                        --network host \
                         "$CACHED_DOCKER_IMG_NAME_AGENCY" \
                         bash -c "cd /home/node/vcxagency-client && yarn install && yarn run test:unit"

  lint-vcxagency-node:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-node && standard

  lint-vcxagency-client:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd vcxagency-client && standard

  lint-easy-indysdk:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Install linter
        run: |
          sudo npm install -g standard@14.3.4
      - name: Lint
        run: |
          cd easy-indysdk && standard

  publish-images:
    needs:
      - workflow-setup
      - build-vcxagency-base
      - build-image-vcxagency
      - test-vcxagency-node
      - test-easy-indysdk
      - test-vcxagency-client
      - lint-vcxagency-node
      - lint-vcxagency-client
      - lint-easy-indysdk
    runs-on: ubuntu-latest
    steps:
      - name: Load up release version
        run: |
          echo ::set-env name=RELEASE_VERSION::$(echo ${{needs.workflow-setup.outputs.RELEASE_VERSION}})
          echo ::set-env name=CACHE_KEY_BASE::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_BASE}})
          echo ::set-env name=CACHE_KEY_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_BASE::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_BASE}})
          echo ::set-env name=CACHED_DOCKER_IMG_NAME_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHED_DOCKER_IMG_NAME_AGENCY}})
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo ${{needs.workflow-setup.outputs.GITHUB_REPOSITORY_LOWERCASE}})
          echo ::set-env name=PUBLISH_DOCKER_IMG_NAME_BASE::$(echo ${{needs.workflow-setup.outputs.PUBLISH_DOCKER_IMG_NAME_BASE}})
          echo ::set-env name=PUBLISH_DOCKER_IMG_NAME_AGENCY::$(echo ${{needs.workflow-setup.outputs.PUBLISH_DOCKER_IMG_NAME_AGENCY}})

      - name: Load base image cache
        id: load-cached-image-base
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_BASE }}
      - name: If no cached image found
        if: steps.load-cached-image-base.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_BASE"; exit -1
      - name: Load base image
        run: docker load < /tmp/imgcache/img_base.rar

      - name: Load agency image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}
      - name: If no cached image found -> ERROR
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_AGENCY"; exit -1
      - name: Load agency image
        run: docker load < /tmp/imgcache/img_agency.rar

      - name: Verify images were loaded
        run: |
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_BASE" || { echo "Image $CACHED_DOCKER_IMG_NAME_BASE was not found!"; docker image ls; exit 1; }
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$CACHED_DOCKER_IMG_NAME_AGENCY" || { echo "Image $CACHED_DOCKER_IMG_NAME_AGENCY was not found!"; docker image ls; exit 1; }

      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish images
        run: |
          REMOTE_DOCKER_IMG_NAME_BASE="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$PUBLISH_DOCKER_IMG_NAME_BASE"
          REMOTE_DOCKER_IMG_NAME_AGENCY="docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$PUBLISH_DOCKER_IMG_NAME_AGENCY"

          docker tag "$CACHED_DOCKER_IMG_NAME_BASE"   "$REMOTE_DOCKER_IMG_NAME_BASE"
          docker tag "$CACHED_DOCKER_IMG_NAME_AGENCY" "$REMOTE_DOCKER_IMG_NAME_AGENCY"
          docker image ls

          docker push "$REMOTE_DOCKER_IMG_NAME_BASE" || true
          docker push "$REMOTE_DOCKER_IMG_NAME_AGENCY" || true

  make-release:
    needs:
      - workflow-setup
      - build-vcxagency-base
      - build-image-vcxagency
      - test-vcxagency-node
      - test-easy-indysdk
      - test-vcxagency-client
      - lint-vcxagency-node
      - lint-vcxagency-client
      - lint-easy-indysdk
    runs-on: ubuntu-latest
    steps:
      - name: Load up release version
        run: |
          echo ::set-env name=RELEASE_VERSION::$(echo ${{needs.workflow-setup.outputs.RELEASE_VERSION}})
      - name: Release for master pushes
        run: |
          if [[ "$RELEASE_VERSION" ]]
          then
            echo "Release version was defined! Will create release $RELEASE_VERSION"
            curl -v --request POST \
                --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
                --header "Content-Type: application/json" \
                -d "{\"tag_name\": \"$RELEASE_VERSION\", \"name\": \"$RELEASE_VERSION\", \"body\": \"Automatic release $RELEASE_VERSION\" }" \
                --url https://api.github.com/repos/$GITHUB_REPOSITORY/releases
          else
             echo "New version was not defined, skipping release. Check 'workflow-setup' job to see the reason."
          fi
